#include <pthread.h>
#include <iostream>
#include <unistd.h>
#include <stdio.h>
#include <mutex>

using namespace std;
pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;

void* func1(void * argFl){
    int *fl1 = (int*)argFl;
    while( *fl1 == 0 ){
        pthread_mutex_trylock(&m);
        for (int i=0; i< 10; i++){
            cout << "1" << flush;
            sleep (2);
        }
        pthread_mutex_unlock(&m);
        sleep (1);
    }
    int* exitCode1 = new int(1);
    pthread_exit(exitCode1);
}

void* func2(void * argFl){
    int *fl1 = (int*)argFl;
    while( *fl1 == 0 ){
        pthread_mutex_lock(&m);
        for (int i=0; i< 10; i++){
            cout << "2" << flush;
            sleep (2);
        }
        pthread_mutex_unlock(&m);
        sleep (1);
    }
    int* exitCode1 = new int(1);
    pthread_exit(exitCode1);
}


int main(){
    pthread_t thread1;
    pthread_t thread2;
    
    int flag1 = 0;
    int flag2 = 0;
    
    pthread_create (&thread1 , NULL , func1 , (void*)&flag1);
    sleep(1);
    pthread_create (&thread2 , NULL , func2 , (void*)&flag2);
 

    getchar();

    flag1 = 1;
    flag2 = 2;

    int* exitCode1;
    int* exitCode2;

    pthread_join(thread1, (void**)&exitCode1);
    pthread_join(thread2, (void**)&exitCode2);

    delete(exitCode1);
    delete(exitCode2);
    pthread_mutex_destroy(&m);
}

